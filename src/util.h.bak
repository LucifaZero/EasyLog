#ifndef EASYLOG_UTIL_H
#define EASYLOG_UTIL_H


#define likely(x) __builtin_expect(!!(x), 1)
#define unlikely(x) __builtin_expect(!!(x), 0)
#define gettid() syscall(__NR_gettid) 


namespace easylog
{

//const int kTimeLength = 24;
//const char* kTimeFormat = "%4d%2d%2d %2d:%2d:%2d.%6d";


//Class Time
//{
//public:
//    Time()
//    {
//        struct timeval tv;
//        gettimeofday(&tv);
//        usecond_ = tv.tv_usec;
//        last_second_ = tv.tv_sec;
//        struct tm cur_tm;
//        localtime_r((time_t*)&last_second_, &cur_tm);
//        year_ = cur_tm.tm_year + 1900;
//        month_ = cur_tm.tm_mon + 1;
//        day_ = cur_tm.tm_day;
//        hour_ = cur_tm.tm_hour;
//        minute_ = cur_tm.tm_min;
//        second_ = cur_tm.tm_sec;
//        format_time_usec();
//    }
//
//private:
//    void format_time_usec()
//    {
//        snprintf(str_time_, kTimeLength, kTimeFormat, year_, month_, day_, hour_, minute_, second_, usecond_);
//    }
//
//    void format_time_sec()
//    {
//        snprintf(str_time_ + 18, 6, "%6d", usecond_);
//    }
//
//private:
//    char[kTimeLength] str_time_;
//    int year_;
//    int month_;
//    int day_;
//    int hour_;
//    int minute_;
//    int second_;
//    int usecond_;
//    int last_second_;
//};
//





} //namespace easylog

#endif // EASYLOG_UTIL_H
